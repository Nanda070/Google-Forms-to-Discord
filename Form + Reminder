// ====================== Настройки ======================
const WEBHOOK_REQUEST   = "";
const WEBHOOK_REMINDER  = "";
const CALENDAR_ID       = "";

const MENTION     = "";
const COLOR       = 0x2ECC71;
const BOT_NAME    = "";
const BOT_ICON    = "";
const FOOTER_TEXT = "Created by N.K | Для связи: Discord nanda070";
const FOOTER_ICON = "";

// ====================== Обработчик новой заявки ======================
function onFormSubmit(e) {
  // Достаём ответы строго по заголовкам вопросов:
  const named = e.namedValues;
  const fioPos     = named["Ваше ФИО | Должность:"]?.[0]     || "";
  const department = named["Ваш Департамент:"]?.[0]          || "";
  const reason     = named["Причина Запроса:"]?.[0]           || "";
  const route      = named["Маршрут:"]?.[0]                  || "";
  const dateStr    = named["Дата сопровождения:"]?.[0]       || "";
  const timeStr    = named["Время сопровождения:"]?.[0]      || "";

  // Если чего-то нет — логируем и выходим
  if (![fioPos, department, reason, route, dateStr, timeStr].every(v => v)) {
    console.error("onFormSubmit: не все поля получены", named);
    return;
  }

  // Формируем поля embed с **жирным** выделением маршрута, даты и времени
  const fields = [
    { name: "ФИО | Должность:",        value: fioPos,              inline: false },
    { name: "Департамент:",            value: department,          inline: false },
    { name: "Причина Запроса:",        value: reason,              inline: false },
    { name: "Маршрут сопровождения:",  value: `**${route}**`,      inline: false },
    { name: "Дата сопровождения:",     value: `**${dateStr}**`,    inline: false },
    { name: "Время сопровождения:",    value: `**${timeStr}**`,    inline: false }
  ];

  // Отправляем в Discord
  const payloadReq = {
    content: MENTION,
    embeds: [{
      author:    { name: BOT_NAME, icon_url: BOT_ICON },
      title:     "Новый запрос на сопровождение",
      color:     COLOR,
      fields:    fields,
      footer:    { text: FOOTER_TEXT, icon_url: FOOTER_ICON },
      timestamp: new Date().toISOString()
    }]
  };
  UrlFetchApp.fetch(WEBHOOK_REQUEST, {
    method:      "post",
    contentType: "application/json",
    payload:     JSON.stringify(payloadReq)
  });

  // Парсим дату и время для календаря
  const startDate = parseDateTime(dateStr, timeStr);
  if (!startDate) {
    console.error("onFormSubmit: не удалось распарсить дату/время", dateStr, timeStr);
    return;
  }
  const endDate = new Date(startDate.getTime() + 60*60*1000);

  // Создаём событие
  CalendarApp.getCalendarById(CALENDAR_ID)
    .createEvent(
      `Сопровождение: ${fioPos}`,
      startDate,
      endDate,
      {
        description:
          `Департамент: ${department}\n` +
          `Причина: ${reason}\n` +
          `Маршрут: ${route}`
      }
    );
}

// ====================== Функция напоминаний (каждую минуту) ======================
function sendReminder() {
  const now       = new Date();
  const windowEnd = new Date(now.getTime() + 32*60*1000);
  const events    = CalendarApp.getCalendarById(CALENDAR_ID).getEvents(now, windowEnd);

  const props = PropertiesService.getScriptProperties();
  let done = JSON.parse(props.getProperty("notifiedEvents") || "[]")
             .filter(x => x.start > now.getTime());

  const MIN_DIFF = 28*60*1000, MAX_DIFF = 32*60*1000;

  events.forEach(evt => {
    const startMs = evt.getStartTime().getTime(),
          diff    = startMs - now.getTime();
    if (diff < MIN_DIFF || diff > MAX_DIFF) return;
    if (done.some(x => x.id === evt.getId())) return;

    const desc = evt.getDescription();
    const dep   = desc.match(/Департамент:\s*(.*)/i)?.[1] || "—";
    const route = desc.match(/Маршрут:\s*(.*)/i)?.[1]      || "—";
    const title = evt.getTitle().replace("Сопровождение: ", "");
    const dtStr = formatDateTime(evt.getStartTime());

    const fields = [
      {
        name:  "Напоминание за 30 минут до начала сопровождения.",
        value: `Сопровождение запрошено на **${dtStr}** по маршруту **${route}**`,
        inline: false
      },
      {
        name:  "Департамент сопровождения:",
        value: dep,
        inline: false
      }
    ];

    const payloadRem = {
      content: MENTION,
      embeds: [{
        author:    { name: BOT_NAME, icon_url: BOT_ICON },
        title:     `Напоминание о сопровождении: ${title}`,
        color:     COLOR,
        fields:    fields,
        footer:    { text: `Создание уведомления: ${formatDateTime(now)}`, icon_url: FOOTER_ICON },
        timestamp: now.toISOString()
      }]
    };

    UrlFetchApp.fetch(WEBHOOK_REMINDER, {
      method:      "post",
      contentType: "application/json",
      payload:     JSON.stringify(payloadRem)
    });

    done.push({ id: evt.getId(), start: startMs });
  });

  props.setProperty("notifiedEvents", JSON.stringify(done));
}

// ====================== Утилиты ======================
function parseDateTime(dateStr, timeStr) {
  // Поддерживаем формат DD.MM.YYYY или DD/MM/YYYY
  const sep = dateStr.includes("/") ? "/" : ".";
  let [d, m, y] = dateStr.split(sep).map(Number);
  // Если месяц >12 — значит, возможно, формат M/D/YYYY, меняем
  if (m > 12 && d <= 12) [d, m] = [m, d];
  if (!d||!m||!y) return null;
  const dt = new Date(y, m-1, d);
  const [h, min] = timeStr.split(":").map(Number);
  if (isNaN(h)||isNaN(min)) return null;
  dt.setHours(h, min, 0);
  return dt;
}

function formatDateTime(date) {
  const dd = String(date.getDate()).padStart(2,"0");
  const mm = String(date.getMonth()+1).padStart(2,"0");
  const yy = date.getFullYear();
  const hh = String(date.getHours()).padStart(2,"0");
  const mi = String(date.getMinutes()).padStart(2,"0");
  return `${dd}.${mm}.${yy} ${hh}:${mi}`;
}
