// ==================== КОНФИГУРАЦИЯ ====================
const WEBHOOK_URL       = "";
const COLOR             = 0x404040;
const TITLE             = "";
const URL               = "";  
const DESCRIPTION       = "";  
const THUMBNAIL_URL     = "";
const IMAGE_URL         = "";

const AUTHOR_NAME       = "";
const AUTHOR_URL        = "";
const AUTHOR_ICON_URL   = "";

const FOOTER_TEXT       = "";
const FOOTER_ICON_URL   = "";
const INCLUDE_TIMESTAMP = false;

const STATIC_MENTION    = "";



// ==================== УТИЛИТЫ ====================

function chunkLines(lines, maxLen = 1024) {
  const parts = [];
  let buffer = "";

  for (const line of lines) {
    const combined = buffer ? buffer + "\n" + line : line;
    if (combined.length > maxLen) {
      parts.push(buffer);
      buffer = line;
    } else {
      buffer = combined;
    }
  }
  if (buffer) parts.push(buffer);
  return parts.filter(p => p.trim().length > 0);
}

function batchFields(fields, maxFields = 25, charLimit = 3000) {
  const batches = [];
  let current = { list: [], length: 0 };

  for (const f of fields) {
    const size = f.name.length + f.value.length;
    if (current.list.length >= maxFields || current.length + size > charLimit) {
      batches.push(current.list);
      current = { list: [], length: 0 };
    }
    current.list.push(f);
    current.length += size;
  }
  if (current.list.length) batches.push(current.list);
  return batches.length ? batches : [[]];
}



// ==================== ОСНОВНАЯ ФУНКЦИЯ ====================

function onSubmit(e) {
  const responses = e.response.getItemResponses();
  const fields = [];

  // 1) Сбор полей
  responses.forEach(resp => {
    const question = resp.getItem().getTitle();
    const answer   = resp.getResponse();
    if (!answer) return;

    const chunks = chunkLines(answer.split("\n"));
    chunks.forEach((chunk, idx) => {
      if (/^\d+\/\d+$/.test(chunk.trim())) return;
      fields.push({
        name:   idx === 0 ? question : `${question} (cont.)`,
        value:  chunk,
        inline: false
      });
    });
  });

  // 2) Батчим поля
  const fieldBatches = batchFields(fields, 25, 3000);
  const lastIndex    = fieldBatches.length - 1;

  // 3) Формируем embeds
  const allEmbeds = fieldBatches.map((batch, idx) => {
    const embed = {
      color:  COLOR,
      fields: batch
    };

    // Первый embed — добавляем шапку
    if (idx === 0) {
      embed.title       = TITLE;
      if (URL)         embed.url         = URL;
      if (DESCRIPTION) embed.description = DESCRIPTION;
      embed.author      = {
        name:     AUTHOR_NAME,
        url:      AUTHOR_URL,
        icon_url: AUTHOR_ICON_URL
      };
      if (THUMBNAIL_URL) embed.thumbnail = { url: THUMBNAIL_URL };
    }

    // Последний embed — добавляем картинку, footer и timestamp
    if (idx === lastIndex) {
      if (IMAGE_URL)     embed.image     = { url: IMAGE_URL };
      embed.footer      = {
        text:     FOOTER_TEXT,
        icon_url: FOOTER_ICON_URL
      };
      if (INCLUDE_TIMESTAMP) {
        embed.timestamp = new Date().toISOString();
      }
    }

    return embed;
  });

  // 4) Отправляем пачками по 10 embeds
  const MAX_PER_MSG = 10;
  for (let i = 0; i < allEmbeds.length; i += MAX_PER_MSG) {
    const slice = allEmbeds.slice(i, i + MAX_PER_MSG);
    UrlFetchApp.fetch(WEBHOOK_URL, {
      method:      "post",
      contentType: "application/json",
      payload:     JSON.stringify({
        content: STATIC_MENTION,
        embeds:  slice
      })
    });
  }
}
